package org.bytedeco.javacpp.presets;

import org.bytedeco.javacpp.annotation.Platform;
import org.bytedeco.javacpp.annotation.Properties;
import org.bytedeco.javacpp.tools.Info;
import org.bytedeco.javacpp.tools.InfoMap;
import org.bytedeco.javacpp.tools.InfoMapper;

@Properties(inherit = {opencv_imgproc.class}, target = "org.bytedeco.javacpp.opencv_dnn", value = {@Platform(include = {"<opencv2/dnn.hpp>", "<opencv2/dnn/version.hpp>", "<opencv2/dnn/dict.hpp>", "<opencv2/dnn/all_layers.hpp>", "<opencv2/dnn/dnn.hpp>", "<opencv2/dnn/layer.hpp>", "<opencv2/dnn/shape_utils.hpp>"}, link = {"opencv_dnn@.4.0"}), @Platform(preload = {"libopencv_dnn"}, value = {"ios"}), @Platform(link = {"opencv_dnn401"}, value = {"windows"})})
public class opencv_dnn implements InfoMapper {
    public void map(InfoMap infoMap) {
        infoMap.put(new Info("CV__DNN_EXPERIMENTAL_NS_BEGIN", "CV__DNN_EXPERIMENTAL_NS_END").cppTypes(new String[0]).annotations(new String[0])).put(new Info("!defined CV_DOXYGEN && !defined CV_DNN_DONT_ADD_INLINE_NS").define(false)).put(new Info("cv::dnn::MatShape").annotations("@StdVector").pointerTypes("IntPointer")).put(new Info("std::vector<cv::dnn::MatShape>").pointerTypes("MatShapeVector").define()).put(new Info("std::vector<std::vector<cv::dnn::MatShape> >").pointerTypes("MatShapeVectorVector").define()).put(new Info("std::vector<std::vector<cv::Range> >").pointerTypes("RangeVectorVector").define()).put(new Info("std::vector<std::pair<cv::dnn::Backend,cv::dnn::Target> >").pointerTypes("IntIntPairVector").cast()).put(new Info("cv::dnn::LRNLayer::type").javaNames("lrnType")).put(new Info("cv::dnn::PoolingLayer::type").javaNames("poolingType")).put(new Info("cv::dnn::BlankLayer", "cv::dnn::LSTMLayer", "cv::dnn::RNNLayer", "cv::dnn::BaseConvolutionLayer", "cv::dnn::ConvolutionLayer", "cv::dnn::DeconvolutionLayer", "cv::dnn::LRNLayer", "cv::dnn::PoolingLayer", "cv::dnn::SoftmaxLayer", "cv::dnn::InnerProductLayer", "cv::dnn::MVNLayer", "cv::dnn::ReshapeLayer", "cv::dnn::FlattenLayer", "cv::dnn::ConcatLayer", "cv::dnn::SplitLayer", "cv::dnn::SliceLayer", "cv::dnn::PermuteLayer", "cv::dnn::PaddingLayer", "cv::dnn::ActivationLayer", "cv::dnn::ReLULayer", "cv::dnn::ChannelsPReLULayer", "cv::dnn::ELULayer", "cv::dnn::TanHLayer", "cv::dnn::SigmoidLayer", "cv::dnn::BNLLLayer", "cv::dnn::AbsLayer", "cv::dnn::PowerLayer", "cv::dnn::CropLayer", "cv::dnn::EltwiseLayer", "cv::dnn::BatchNormLayer", "cv::dnn::MaxUnpoolLayer", "cv::dnn::ScaleLayer", "cv::dnn::ShiftLayer", "cv::dnn::PriorBoxLayer", "cv::dnn::DetectionOutputLayer", "cv::dnn::NormalizeBBoxLayer", "cv::dnn::ProposalLayer", "cv::dnn::ReLU6Layer", "cv::dnn::ReorgLayer", "cv::dnn::RegionLayer", "cv::dnn::ResizeNearestNeighborLayer", "cv::dnn::CropAndResizeLayer", "cv::dnn::InterpLayer", "cv::dnn::ResizeLayer", "cv::dnn::ShuffleChannelLayer", "cv::dnn::experimental_dnn_v5::ShuffleChannelLayer").purify()).put(new Info("cv::dnn::Net::forward(cv::dnn::Net::LayerId, cv::dnn::Net::LayerId)", "cv::dnn::Net::forward(cv::dnn::Net::LayerId*, cv::dnn::Net::LayerId*)", "cv::dnn::Net::forwardOpt(cv::dnn::Net::LayerId)", "cv::dnn::Net::forwardOpt(cv::dnn::Net::LayerId*)", "std::map<cv::String,cv::dnn::DictValue>::const_iterator").skip()).put(new Info("std::vector<cv::Mat*>").pointerTypes("MatPointerVector").define()).put(new Info("cv::dnn::Layer* (*)(cv::dnn::LayerParams&)").annotations("@Convention(value=\"\", extern=\"C++\")"));
    }
}
